@page "/contacts"
@inject IJSRuntime JSRuntime
@inject ContactService ServiceContact

<h2>Contacts</h2>

<div class="container">
    <div class="row">
        <div class="text-left mb-4">
            <Button data-toggle="modal" data-target="#contactModal"
                    class="btn btn-primary btn-sm text-center"
                    @onclick="AddForm_Click">
                <i class="fas fa-plus-circle"></i>
                Add Contact
            </Button>
        </div>
        <div class="input-group col-md-4 offset-md-6">
            <input type="text" id="txtSearch" class="form-control" placeholder="Search Contact" 
                   @bind="SearchTerm" @bind:event="oninput" />
        </div>
    </div>
</div>
<br />

@if (_contacts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table table-hover table-sm'>
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Mobile No.</th>
                <th>Email Address</th>
                <th>Address</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in _contacts)
            {
                <tr>
                    <td>@contact.FirstName</td>
                    <td>@contact.LastName</td>
                    <td>@contact.MobileNo</td>
                    <td>@contact.EmailAddress</td>
                    <td>@contact.Address</td>
                    <td>
                        <Button data-toggle="modal" data-target="#contactModal"
                                class="btn btn-outline-dark btn-sm text-center"
                                @onclick="(() => EditForm_Click(contact))">
                            <i class="fas fa-user-edit"></i>
                        </Button>
                        <Button data-toggle="modal" data-target="#deleteModal"
                                class="btn btn-outline-danger btn-sm text-center"
                                @onclick="(() => ForDelete(contact))">
                            <i class="fas fa-trash-alt"></i>
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (this.TotalPages() > 1)
    {
        <div>
            @if (CurrentPage == 1)
            {
                <button disabled class="btn btn-outline-dark"><i class="fas fa-angle-double-left"></i></button>
                <button disabled class="btn btn-outline-dark"><i class="fas fa-angle-left"></i></button>
            }
            else
            {
                <button class="btn btn-outline-dark" @onclick="@MoveFirst">
                    <i class="fas fa-angle-double-left"></i>
                </button>
                <button class="btn btn-outline-dark" @onclick="@MoveBack">
                    <i class="fas fa-angle-left"></i>
                </button>
            }
            <span>@CurrentPage of @TotalPages() </span>
            @if (!AtLastPage())
            {
                <button class="btn btn-outline-dark" @onclick="@MoveNext">
                    <i class="fas fa-angle-right"></i>
                </button>
                <button class="btn btn-outline-dark" @onclick="@MoveLast">
                    <i class="fas fa-angle-double-right"></i>
                </button>
            }
            else
            {
                <button disabled class="btn btn-outline-dark"><i class="fas fa-angle-right"></i></button>
                <button disabled class="btn btn-outline-dark"><i class="fas fa-angle-double-right"></i></button>
            }
        </div>
    }
}

<AddEditForm Title="@Title" Contact="@_contact" OnClose="@AddEditForm_Close"></AddEditForm>
<DeleteContact Contact="@_contact" OnClick="@DeleteContact" />

@code {
    Contact _contact = new Contact();
    private string Title { get; set; }
    private string SearchString { get; set; }
    private IEnumerable<Contact> _contacts;
    private IEnumerable<Contact> ContactList { get; set; }

    // Pagination
    private int TotalCount;
    private int CurrentPage = 1;
    private int ItemsPerPage { get; set; } = 8;

    protected override async Task OnInitializedAsync()
    {
        await Load();
        UpdateDisplay();
        TotalCount = ContactList.Count();
    }

    private async Task Load()
    {
        ContactList = await ServiceContact.GetContactsAsync();
    }

    private void AddForm_Click()
    {
        Title = "Add Contact";
        _contact = new Contact();
    }

    private void EditForm_Click(Contact contact)
    {
        Title = "Edit Contact";
        _contact = contact;
    }

    private void ForDelete(Contact contact)
    {
        _contact = contact;
    }

    private async Task DeleteContact()
    {
        var contact = await ServiceContact.DeleteContactAsync(_contact.Id);
        await JSRuntime.InvokeAsync<object>("HideModal", "deleteModal");
        await Load();
        UpdateDisplay();
    }

    private async void AddEditForm_Close()
    {
        await Load();
        UpdateDisplay();
        await InvokeAsync(StateHasChanged);
    }

    private string searchTerm;

    private string SearchTerm
    {
        get { return searchTerm; }

        set
        {
            searchTerm = value;
            InvokeAsync(async () => await SearchContact());
        }
    }

    private async Task SearchContact()
    {
        if (string.IsNullOrEmpty(searchTerm) == false)
        {
            ContactList = ContactList.Where(c =>
                     c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.MobileNo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.EmailAddress.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            _contacts = ContactList;
            TotalCount = ContactList.Count();
        }
        else
        {
            await Load();
            UpdateDisplay();
            TotalCount = ContactList.Count();
        }

        await InvokeAsync(StateHasChanged);
    }

    private void UpdateDisplay()
    {
        _contacts = ContactList.Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage).ToList();
    }

    private bool AtLastPage()
    {
        return CurrentPage >= TotalPages();
    }

    private int TotalPages()
    {
        return Convert.ToInt32(Math.Ceiling(TotalCount / Convert.ToDecimal(ItemsPerPage)));
    }

    private void MoveFirst()
    {
        CurrentPage = 1;
        UpdateDisplay();
    }

    private void MoveBack()
    {
        CurrentPage--;
        UpdateDisplay();
    }

    private void MoveNext()
    {
        CurrentPage++;
        UpdateDisplay();
    }

    private void MoveLast()
    {
        CurrentPage = TotalPages();
        UpdateDisplay();
    }
}

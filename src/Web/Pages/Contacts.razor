@page "/contacts"
@inject IModalService Modal
@inject IJSRuntime JSRuntime
@inject ContactService ServiceContact

<h2>Contacts</h2>

<div class="container">
    <div class="row">
        <div class="text-left mb-4">
            <Button data-toggle="modal" data-target="#contactModal"
                    class="btn btn-primary btn-sm text-center"
                    @onclick="AddForm_Click">
                <i class="fas fa-plus-circle"></i>
                Add Contact
            </Button>
        </div>
        <div class="input-group col-md-4 offset-md-6">
            <input type="text" class="form-control" placeholder="Search Contact" @bind="SearchString" />

            <div class="text-right mb-4">
                <Button style="margin-left: 5px" class="btn btn-primary btn-sm text-center"
                        @onclick="SearchContact_Click">
                    <i class="fas fa-search"></i>
                    Search
                </Button>
            </div>
        </div>
    </div>
</div>
<br />

@if (_contacts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table table-hover table-sm'>
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Mobile No.</th>
                <th>Email Address</th>
                <th>Address</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in _contacts)
            {
                <tr>
                    <td>@contact.FirstName</td>
                    <td>@contact.LastName</td>
                    <td>@contact.MobileNo</td>
                    <td>@contact.EmailAddress</td>
                    <td>@contact.Address</td>
                    <td>
                        <Button data-toggle="modal" data-target="#contactModal"
                                class="btn btn-outline-dark btn-sm text-center"
                                @onclick="(() => EditForm_Click(contact))">
                            <i class="far fa-edit"></i>
                        </Button>
                        <Button data-toggle="modal" data-target="#deleteModal" 
                                class="btn btn-outline-danger btn-sm text-center"
                                @onclick="(() => ForDelete(contact))">
                            <i class="fas fa-trash-alt"></i>
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<AddEditForm Title="@Title" Contact="@_contact" OnClose="@AddEditForm_Close"></AddEditForm>
<DeleteContact Contact="@_contact" OnClick="@DeleteContact" />

@code {
    Contact _contact = new Contact();
    private IEnumerable<Contact> _contacts;
    private string Title { get; set; }
    private string SearchString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        _contacts = await ServiceContact.GetContactsAsync();
    }

    private void AddContact_Click()
    {
        Modal.Show<UpdateForm>("Add Contact");
    }

    private void EditContact_Click(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UpdateForm.Id), id);
        Modal.Show<UpdateForm>("Edit Contact", parameters);
    }

    private void DeleteContact_Click(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteForm.Id), id);
        Modal.Show<DeleteForm>("Delete Contact", parameters);
    }

    private void AddForm_Click()
    {
        Title = "Add Contact";
        _contact = new Contact();
    }

    private void EditForm_Click(Contact contact)
    {
        Title = "Edit Contact";
        _contact = contact;
    }

    private void ForDelete(Contact contact)
    {
        _contact = contact;
    }

    private async Task DeleteContact()
    {
        var contact = await ServiceContact.DeleteContactAsync(_contact.Id);
        await JSRuntime.InvokeAsync<object>("HideModal", "deleteModal");
        await Load();
    }

    private void AddEditForm_Close()
    {
        StateHasChanged();
    }

    private async Task SearchContact_Click()
    {
        if (string.IsNullOrEmpty(SearchString) == false)
        {
            _contacts = _contacts.Where(c =>
                         c.FirstName.Contains(SearchString) ||
                         c.LastName.Contains(SearchString) ||
                         c.MobileNo.Contains(SearchString) ||
                         c.EmailAddress.Contains(SearchString) ||
                         c.Address.Contains(SearchString));
        }
        else
        {
            await Load();
        }
    }
}
